---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install dependencies
  apt:
    name:
      - gnupg
      - curl
      - ca-certificates
      - lsb-release
    state: present

- name: Add PostgreSQL repository key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present
    filename: pgdg

- name: Install PostgreSQL packages
  apt:
    name: "{{ postgresql_packages }}"
    state: present
    update_cache: yes
  register: pg_install_result
  failed_when: false

- name: Display PostgreSQL installation result
  debug:
    var: pg_install_result

- name: Check which PostgreSQL packages are available
  shell: apt-cache search postgresql | grep -E 'postgresql-[0-9]+|postgresql-client|postgresql-contrib'
  register: pg_available_packages
  changed_when: false
  when: pg_install_result is failed or not pg_install_result.changed

- name: Display available PostgreSQL packages
  debug:
    var: pg_available_packages
  when: pg_available_packages is defined and pg_available_packages.stdout is defined

- name: Ensure PostgreSQL data directory exists
  file:
    path: "{{ postgresql_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700

- name: Ensure PostgreSQL log directory exists
  file:
    path: "{{ postgresql_log_directory }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0755

- name: Configure PostgreSQL
  template:
    src: postgresql.conf.j2
    dest: "{{ postgresql_conf_path }}"
    owner: postgres
    group: postgres
    mode: 0644
  notify: restart postgresql

- name: Configure PostgreSQL HBA
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_hba_path }}"
    owner: postgres
    group: postgres
    mode: 0640
  notify: restart postgresql

- name: Create PostgreSQL backup directory
  file:
    path: "{{ postgresql_backup_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0750

- name: Install backup script
  template:
    src: backup.sh.j2
    dest: /usr/local/bin/postgresql_backup.sh
    owner: root
    group: root
    mode: 0755

- name: Set up backup cron job
  cron:
    name: "PostgreSQL backup"
    hour: "3"
    minute: "0"
    job: "/usr/local/bin/postgresql_backup.sh"
    user: postgres

- name: Check if PostgreSQL clusters exist
  shell: pg_lsclusters
  register: pg_clusters
  changed_when: false
  failed_when: false

- name: Display PostgreSQL clusters
  debug:
    var: pg_clusters.stdout_lines

- name: Stop PostgreSQL service before recreating cluster
  systemd:
    name: postgresql
    state: stopped
  when: pg_clusters.rc != 0 or pg_clusters.stdout is not defined or pg_clusters.stdout == ""
  failed_when: false

- name: Drop existing broken PostgreSQL cluster if it exists
  shell: pg_dropcluster --stop {{ postgresql_version }} main
  when: pg_clusters.rc != 0 or pg_clusters.stdout is not defined or pg_clusters.stdout == ""
  failed_when: false

- name: Create PostgreSQL cluster if it doesn't exist
  shell: pg_createcluster {{ postgresql_version }} main
  when: pg_clusters.rc != 0 or pg_clusters.stdout is not defined or pg_clusters.stdout == ""

- name: Start PostgreSQL service
  systemd:
    name: postgresql
    state: started
    enabled: yes
  when: pg_clusters.rc != 0 or pg_clusters.stdout is not defined or pg_clusters.stdout == ""

- name: Set PostgreSQL admin user password
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ postgresql_admin_user }}"
    password: "{{ postgresql_admin_password }}"
    login_host: localhost
  no_log: true
  when: postgresql_admin_password != "ChangeMe"

- name: Ensure required Python packages are installed
  apt:
    name:
      - python3-pip
      - python3-dev
      - libpq-dev
    state: present

- name: Install psycopg2 Python module
  pip:
    name: psycopg2
    state: present

- name: Check PostgreSQL service status
  systemd:
    name: "postgresql"
  register: postgresql_service_status
  failed_when: false

- name: Display PostgreSQL service status
  debug:
    var: postgresql_service_status

- name: Restart PostgreSQL if it's not running
  systemd:
    name: "postgresql"
    state: restarted
  when: postgresql_service_status.status.ActiveState is defined and postgresql_service_status.status.ActiveState != "active"

- name: Wait for PostgreSQL to start
  wait_for:
    port: "{{ postgresql_port }}"
    timeout: 30
  register: pg_wait_result
  failed_when: false

- name: Display PostgreSQL wait result
  debug:
    var: pg_wait_result

- name: Verify PostgreSQL is running
  command: pg_isready
  register: pg_ready
  changed_when: false
  failed_when: false

- name: Display PostgreSQL readiness
  debug:
    var: pg_ready

- name: Check PostgreSQL permission setup
  become: yes
  become_user: postgres
  command: psql -c "\du"
  register: postgres_roles
  changed_when: false
  failed_when: false

- name: Create PostgreSQL users with debug output
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    role_attr_flags: "{{ item.role_attr_flags | default('') }}"
    state: present
  with_items: "{{ postgresql_users }}"
  register: create_users_result
  failed_when: false
  no_log: false  # Temporarily disable no_log for debugging

- name: Debug user creation results (without passwords)
  debug:
    msg: "User creation for {{ item.item.name }} result: {{ 'success' if item.changed or item.failed is defined and not item.failed else 'failed' }}"
  with_items: "{{ create_users_result.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Create PostgreSQL databases
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(postgresql_admin_user) }}"
    encoding: "{{ item.encoding | default('UTF8') }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    state: present
  with_items: "{{ postgresql_databases }}"