---
- name: Install required packages
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
      - libpq-dev
    state: present
    update_cache: yes
  become: yes

- name: Ensure PostgreSQL is started and enabled
  service:
    name: postgresql
    state: started
    enabled: yes
  become: yes

- name: Get PostgreSQL version
  shell: psql --version | awk '{print $3}' | cut -d. -f1
  register: postgresql_version_output
  changed_when: false
  become: yes

- name: Set PostgreSQL version fact
  set_fact:
    postgresql_version: "{{ postgresql_version_output.stdout }}"

- name: Find PostgreSQL configuration directory
  shell: find /etc/postgresql -name "postgresql.conf" | head -n 1 | xargs dirname
  register: pg_conf_dir
  changed_when: false
  become: yes
  failed_when: pg_conf_dir.stdout == ""

- name: Set PostgreSQL configuration path
  set_fact:
    postgresql_config_path: "{{ pg_conf_dir.stdout }}"

- name: Check if SonarQube database exists
  become: yes
  shell: >
    sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ sonarqube_db_name }}'"
  register: db_exists
  changed_when: false

- name: Create SonarQube database
  become: yes
  shell: >
    sudo -u postgres psql -c "CREATE DATABASE {{ sonarqube_db_name }} WITH ENCODING 'UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;"
  when: db_exists.stdout != "1"

- name: Check if SonarQube user exists
  become: yes
  shell: >
    sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ sonarqube_db_user }}'"
  register: user_exists
  changed_when: false

- name: Create SonarQube database user
  become: yes
  shell: >
    sudo -u postgres psql -c "CREATE USER {{ sonarqube_db_user }} WITH ENCRYPTED PASSWORD '{{ sonarqube_db_password }}';"
  when: user_exists.stdout != "1"

- name: Grant privileges to SonarQube user
  become: yes
  shell: >
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ sonarqube_db_name }} TO {{ sonarqube_db_user }};"
  when: user_exists.stdout != "1" or db_exists.stdout != "1"

- name: Grant schema privileges to SonarQube user (connect to the specific database)
  become: yes
  shell: >
    sudo -u postgres psql -d {{ sonarqube_db_name }} -c "GRANT ALL PRIVILEGES ON SCHEMA public TO {{ sonarqube_db_user }};"
  when: user_exists.stdout != "1" or db_exists.stdout != "1"

- name: Display PostgreSQL configuration path (debug)
  debug:
    msg: "PostgreSQL configuration path is {{ postgresql_config_path }}"

- name: Configure PostgreSQL for remote connections if needed
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
  become: yes
  notify: restart postgresql